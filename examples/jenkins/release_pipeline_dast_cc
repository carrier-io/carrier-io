pipeline {
	agent any
	environment {
		galloper = credentials("galloper-url")
        token = credentials("galloper-token-1")
        redis_pwd = credentials("redis_pwd")
        redis_host = credentials("redis_host")
	}
	stages {
		stage('Deploying Project') {
			steps {
				sh "mkdir reports || echo 'Ok'"
			    sh "docker run -d -p 9099:8080 -t --rm --name springboot-petclinic getcarrier/petclinic:latest"
			}
		}
		stage('Smoke tests') {
			steps {
				echo "Assume it is fine"
			}
		}
		stage('Tests') {
			parallel {
				stage('Regression') {
					steps {
						echo "Assuming good"
					}
				}
				stage('Performance') {
					steps {
						script {
							def dockerParamsString = "--entrypoint=''"
							def params = [
								"-t",
								"-e project_id=1",
								"-e galloper_url=$galloper",
								"-e token=$token"
							]
							for (param in params) {
								dockerParamsString += " ${param}"
							}
                            docker.image("getcarrier/control_tower:latest").inside(dockerParamsString){
                                echo "Starting job"
                                sh """run --test_id=$backend_test_id -p $WORKSPACE/reports"""
                            }
						}
					}
				}
				stage('DAST') {
					steps {
					    script {
                            def filename = 'examples/configs/zapdast.yaml'
                            def data = readYaml file: filename

                            // Change something in the file
                            data.global.processing.false_positive.galloper = "$galloper"
                            data.global.processing.false_positive.project_id = 1
                            data.global.processing.false_positive.token = "$token"
                            data.global.reporters.galloper.url = "$galloper"
                            data.global.reporters.galloper.project_id = 1
                            data.global.reporters.galloper.token = "$token"
                            data.global.reporters.html.file = "$WORKSPACE/reports/dast_report.html"
                            data.global.reporters.junit.file = "$WORKSPACE/reports/dast_report.xml"
                            data.suites.dast_zap.scanners.dast.zap.target = "http://$security_entrypoint:9099"
                            data.suites.dast_zap.settings.build_id = "$BUILD_ID"
                            //writing changes to yaml
                            writeYaml file: "scan_config.yaml", data: data
                            def dockerParamsString = "--entrypoint=''"
							def params = ["-t"]
							for (param in params) {
								dockerParamsString += " ${param}"
							}
                            docker.image("getcarrier/dast:latest").inside(dockerParamsString){
                                sh" dusty run -c $WORKSPACE/scan_config.yaml -s dast_zap"
                            }
					    }
					}
				}
				stage('UI performance') {
                    steps {
                        script {
                            def dockerParamsString = "--entrypoint=''"
                            def params = [
                                    "-t",
                                    "-e REDIS_HOST=$redis_host",
                                    "-e REDIS_PASSWORD=$redis_pwd",
                                    "-e token=$token",
                                    "-e galloper_url=$galloper",
                                    "-e bucket=reports",
                                    "-e project_id=1"
                            ]
                            for (param in params) {
                                dockerParamsString += " ${param}"
                            }
                            docker.image("getcarrier/control_tower:latest").inside(dockerParamsString){
                                echo "Starting job"
                                sh """run --test_id $ui_test_id"""
                            }
                        }
                    }
                }
			}
		}
		stage('Promote Build') {
			steps {
                echo "assuming good here"
			}
		}
	}
	post {
		always {
		    sh "docker stop springboot-petclinic"
			junit allowEmptyResults: true, healthScaleFactor: 5.0, testResults: 'reports/*.xml'
			archiveArtifacts artifacts: 'reports/*.html', fingerprint: true
			cleanWs()
		}
	}
}